import { Grid } from "./Grid.tsx";
import { type Item, move } from "../grid.ts";
import { Controller } from "./Controller.tsx";
import { useState } from "hono/jsx";

const initialItems: ReadonlyArray<Item> = [
  // floor 0
  ...Array.from({ length: 5 }).flatMap((_, x) =>
    Array.from({ length: 5 }).map((_, y): Item => ({
      floor: 0,
      type: "ice",
      x: 1 + x,
      y: 1 + y,
    }))
  ),
  {
    floor: 0,
    type: "player",
    x: 1,
    y: 1,
  },
  {
    floor: 0,
    type: "wall",
    x: 1,
    y: 1,
    direction: "horizontal",
  },
  {
    floor: 0,
    type: "wall",
    x: 2,
    y: 1,
    direction: "horizontal",
  },
  {
    floor: 0,
    type: "wall",
    x: 3,
    y: 1,
    direction: "horizontal",
  },
  {
    floor: 0,
    type: "wall",
    x: 4,
    y: 1,
    direction: "horizontal",
  },
  {
    floor: 0,
    type: "wall",
    x: 5,
    y: 1,
    direction: "horizontal",
  },
  {
    floor: 0,
    type: "wall",
    x: 1,
    y: 1,
    direction: "vertical",
  },
  {
    floor: 0,
    type: "wall",
    x: 4,
    y: 1,
    direction: "vertical",
  },
  {
    floor: 0,
    type: "wall",
    x: 6,
    y: 1,
    direction: "vertical",
  },
  {
    floor: 0,
    type: "wall",
    x: 1,
    y: 2,
    direction: "vertical",
  },
  {
    floor: 0,
    type: "wall",
    x: 3,
    y: 2,
    direction: "vertical",
  },
  {
    floor: 0,
    type: "wall",
    x: 6,
    y: 2,
    direction: "vertical",
  },
  {
    floor: 0,
    type: "wall",
    x: 1,
    y: 3,
    direction: "horizontal",
  },
  {
    floor: 0,
    type: "wall",
    x: 1,
    y: 3,
    direction: "vertical",
  },
  {
    floor: 0,
    type: "wall",
    x: 5,
    y: 3,
    direction: "vertical",
  },
  {
    floor: 0,
    type: "wall",
    x: 6,
    y: 3,
    direction: "vertical",
  },
  {
    floor: 0,
    type: "wall",
    x: 3,
    y: 4,
    direction: "horizontal",
  },
  {
    floor: 0,
    type: "wall",
    x: 1,
    y: 4,
    direction: "vertical",
  },
  {
    floor: 0,
    type: "wall",
    x: 6,
    y: 4,
    direction: "vertical",
  },
  {
    floor: 0,
    type: "wall",
    x: 1,
    y: 5,
    direction: "vertical",
  },
  {
    floor: 0,
    type: "wall",
    x: 5,
    y: 5,
    direction: "vertical",
  },
  {
    floor: 0,
    type: "wall",
    x: 6,
    y: 5,
    direction: "vertical",
  },
  {
    floor: 0,
    type: "wall",
    x: 1,
    y: 6,
    direction: "horizontal",
  },
  {
    floor: 0,
    type: "wall",
    x: 2,
    y: 6,
    direction: "horizontal",
  },
  {
    floor: 0,
    type: "wall",
    x: 3,
    y: 6,
    direction: "horizontal",
  },
  {
    floor: 0,
    type: "wall",
    x: 4,
    y: 6,
    direction: "horizontal",
  },
  {
    floor: 0,
    type: "wall",
    x: 5,
    y: 6,
    direction: "horizontal",
  },
  // floor 1
  {
    floor: 1,
    type: "player",
    x: 1,
    y: 1,
  },
  {
    floor: 1,
    type: "wall",
    x: 1,
    y: 1,
    direction: "horizontal",
  },
  {
    floor: 1,
    type: "wall",
    x: 2,
    y: 1,
    direction: "horizontal",
  },
  {
    floor: 1,
    type: "wall",
    x: 4,
    y: 1,
    direction: "horizontal",
  },
  {
    floor: 1,
    type: "wall",
    x: 5,
    y: 1,
    direction: "horizontal",
  },
  {
    floor: 1,
    type: "wall",
    x: 1,
    y: 1,
    direction: "vertical",
  },
  {
    floor: 1,
    type: "wall",
    x: 6,
    y: 1,
    direction: "vertical",
  },
  {
    floor: 1,
    type: "wall",
    x: 1,
    y: 2,
    direction: "vertical",
  },
  {
    floor: 1,
    type: "wall",
    x: 2,
    y: 2,
    direction: "vertical",
  },
  {
    floor: 1,
    type: "wall",
    x: 4,
    y: 2,
    direction: "vertical",
  },
  {
    floor: 1,
    type: "wall",
    x: 6,
    y: 2,
    direction: "vertical",
  },
  {
    floor: 1,
    type: "wall",
    x: 3,
    y: 3,
    direction: "vertical",
  },
  {
    floor: 1,
    type: "wall",
    x: 6,
    y: 3,
    direction: "vertical",
  },
  {
    floor: 1,
    type: "wall",
    x: 2,
    y: 4,
    direction: "horizontal",
  },
  {
    floor: 1,
    type: "wall",
    x: 1,
    y: 4,
    direction: "vertical",
  },
  {
    floor: 1,
    type: "wall",
    x: 4,
    y: 4,
    direction: "vertical",
  },
  {
    floor: 1,
    type: "wall",
    x: 6,
    y: 4,
    direction: "vertical",
  },
  {
    floor: 1,
    type: "wall",
    x: 3,
    y: 5,
    direction: "horizontal",
  },
  {
    floor: 1,
    type: "wall",
    x: 5,
    y: 5,
    direction: "vertical",
  },
  {
    floor: 1,
    type: "wall",
    x: 6,
    y: 5,
    direction: "vertical",
  },
  {
    floor: 1,
    type: "wall",
    x: 1,
    y: 6,
    direction: "horizontal",
  },
  {
    floor: 1,
    type: "wall",
    x: 2,
    y: 6,
    direction: "horizontal",
  },
  {
    floor: 1,
    type: "wall",
    x: 3,
    y: 6,
    direction: "horizontal",
  },
  {
    floor: 1,
    type: "wall",
    x: 4,
    y: 6,
    direction: "horizontal",
  },
  {
    floor: 1,
    type: "wall",
    x: 5,
    y: 6,
    direction: "horizontal",
  },
  // floor 2
  {
    floor: 2,
    type: "player",
    x: 1,
    y: 1,
  },
  {
    floor: 2,
    type: "wall",
    x: 1,
    y: 1,
    direction: "horizontal",
  },
  {
    floor: 2,
    type: "wall",
    x: 2,
    y: 1,
    direction: "horizontal",
  },
  {
    floor: 2,
    type: "wall",
    x: 3,
    y: 1,
    direction: "horizontal",
  },
  {
    floor: 2,
    type: "wall",
    x: 4,
    y: 1,
    direction: "horizontal",
  },
  {
    floor: 2,
    type: "wall",
    x: 5,
    y: 1,
    direction: "horizontal",
  },
  {
    floor: 2,
    type: "wall",
    x: 1,
    y: 1,
    direction: "vertical",
  },
  {
    floor: 2,
    type: "wall",
    x: 6,
    y: 1,
    direction: "vertical",
  },
  {
    floor: 2,
    type: "wall",
    x: 1,
    y: 2,
    direction: "vertical",
  },
  {
    floor: 2,
    type: "wall",
    x: 6,
    y: 2,
    direction: "vertical",
  },
  {
    floor: 2,
    type: "wall",
    x: 1,
    y: 3,
    direction: "vertical",
  },
  {
    floor: 2,
    type: "wall",
    x: 6,
    y: 3,
    direction: "vertical",
  },
  {
    floor: 2,
    type: "wall",
    x: 1,
    y: 4,
    direction: "vertical",
  },
  {
    floor: 2,
    type: "wall",
    x: 6,
    y: 4,
    direction: "vertical",
  },
  {
    floor: 2,
    type: "wall",
    x: 1,
    y: 5,
    direction: "vertical",
  },
  {
    floor: 2,
    type: "wall",
    x: 6,
    y: 5,
    direction: "vertical",
  },
  {
    floor: 2,
    type: "wall",
    x: 1,
    y: 6,
    direction: "horizontal",
  },
  {
    floor: 2,
    type: "wall",
    x: 2,
    y: 6,
    direction: "horizontal",
  },
  {
    floor: 2,
    type: "wall",
    x: 3,
    y: 6,
    direction: "horizontal",
  },
  {
    floor: 2,
    type: "wall",
    x: 4,
    y: 6,
    direction: "horizontal",
  },
  {
    floor: 2,
    type: "wall",
    x: 5,
    y: 6,
    direction: "horizontal",
  },
];

export const App = () => {
  const [items, setItems] = useState(initialItems);
  return (
    <div
      style={{
        height: "100%",
        padding: 16,
        boxSizing: "border-box",
        display: "flex",
      }}
    >
      <Grid width={7} height={6} floorSize={3} items={items} />
      <Controller
        onMove={(direction) => {
          setItems((items) => move(items, direction));
        }}
        onReset={() => {
          setItems(initialItems);
        }}
      />
    </div>
  );
};
